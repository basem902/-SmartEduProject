"""
AI Content Generation Service using Google Gemini API
"""
import os
import logging
from typing import Dict, Optional

try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False

logger = logging.getLogger(__name__)

class AIContentGenerator:
    """ูููุฏ ุงููุญุชูู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
    
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY', '')
        self.enabled = bool(self.api_key) and GENAI_AVAILABLE
        
        if self.enabled:
            try:
                genai.configure(api_key=self.api_key)
                # ุงุณุชุฎุฏุงู ุฃุญุฏุซ ููุฏูู ูุชุงุญ (Gemini 2.5 Flash)
                # ุณุฑูุน ุฌุฏุงู ููุฌุงูู ููุฏุนู ุงูุนุฑุจูุฉ ุจุดูู ููุชุงุฒ
                self.model = genai.GenerativeModel('models/gemini-2.5-flash')
                logger.info("โ Gemini AI initialized successfully (gemini-2.5-flash)")
            except Exception as e:
                logger.error(f"โ Failed to initialize Gemini: {e}")
                self.enabled = False
    
    def generate_instructions(self, context: Dict) -> str:
        """ุชูููุฏ ุชุนูููุงุช ุงูุงุณุชูุงู"""
        
        school_name = context.get('school_name', 'ุงููุฏุฑุณุฉ')
        grade = context.get('grade', '')
        section = context.get('section', '')
        
        # ูููุฐุฌ ุงูุชุฑุงุถู (ูููู ุงุณุชุจุฏุงูู ุจู API call)
        default_content = f"""
๐ ูุฑุญุจุงู ุจู ูู ูุธุงู ุชุณููู ุงููุดุงุฑูุน ุงูุฐูู

๐ฏ **ููู ูุนูู ุงููุธุงูุ**

1. **ุงูุชุณุฌูู ุงูุณุฑูุน**: ุณุฌู ุงุณูู ูุฑุฉ ูุงุญุฏุฉ ููุท
2. **ุฑูุน ุงููุดุฑูุน**: ุงุฑูุน ูููุงุช ูุดุฑูุนู ุจุณูููุฉ
3. **ูุญุต ููุฑู**: ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุญุต ูุดุฑูุนู ุชููุงุฆูุงู
4. **ููุงุญุธุงุช ููุฑูุฉ**: ุงุญุตู ุนูู ููุงุญุธุงุช ูุชุญุณูู ูุดุฑูุนู
5. **ุชุชุจุน ูุจุงุดุฑ**: ุชุงุจุน ุญุงูุฉ ูุดุฑูุนู ูุฏุฑุฌุชู

โ **ุงูููุฒุงุช**:
- ุชุณููู ุขูู ููุดูุฑ
- ุฏุนู ุฌููุน ุฃููุงุน ุงููููุงุช
- ูุญุต ุชููุงุฆู ููุฃุฎุทุงุก
- ูุธุงู ุชูุจููุงุช ุฐูู

๐ฑ ุงูุถู ุงูุขู ุฅูู ูุฑูุจ {school_name} - {grade} {section}
"""
        
        if not self.enabled:
            return default_content.strip()
        
        try:
            prompt = f"""
ุฃูุช ูุณุงุนุฏ ุฐูู ููุธุงู ุชุนูููู. ุงูุชุจ ุชุนูููุงุช ูุฎุชุตุฑุฉ ููุงุถุญุฉ ููุทูุงุจ ุญูู ููููุฉ ุงุณุชุฎุฏุงู ูุธุงู ุชุณููู ุงููุดุงุฑูุน.

ุงูุณูุงู:
- ุงููุฏุฑุณุฉ: {school_name}
- ุงูุตู: {grade}
- ุงูุดุนุจุฉ: {section}

ุงูุชุจ ุงูุชุนูููุงุช ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ุจุฃุณููุจ ูุดุฌุน ููุงุถุญุ ูู 5-7 ููุงุท ุฑุฆูุณูุฉ.
"""
            response = self.model.generate_content(prompt)
            generated_text = response.text
            logger.info("โ AI generated instructions successfully")
            return generated_text.strip()
        except Exception as e:
            logger.error(f"โ AI generation failed: {e}")
            return default_content.strip()
    
    def generate_benefits(self, context: Dict) -> str:
        """ุชูููุฏ ููุงุฆุฏ ุงููุธุงู"""
        
        default_content = """
๐ **ููุงุฐุง ูุธุงู ูุดุฑูุนู ุงูุฐููุ**

โ **ุณูููุฉ ุงูุงุณุชุฎุฏุงู**
ุชุตููู ุจุณูุท ูุณูู ููุงุณุจ ุฌููุน ุงูุทูุงุจ

๐ค **ุฐูุงุก ุงุตุทูุงุนู**
ูุญุต ุชููุงุฆู ูููุงุญุธุงุช ููุฑูุฉ ูุชุญุณูู ูุดุฑูุนู

๐ **ูุชุงุจุนุฉ ุดุงููุฉ**
ุชุงุจุน ุชูุฏูู ูุฏุฑุฌุงุชู ูู ููุงู ูุงุญุฏ

๐ **ุฃูุงู ุนุงูู**
ุญูุงูุฉ ูููุงุชู ูุจูุงูุงุชู ุจุฃุญุฏุซ ุงูุชูููุงุช

โก **ุณุฑุนุฉ ูุงุฆูุฉ**
ุฑูุน ูุชุณููู ุงููุดุงุฑูุน ูู ุซูุงูู ูุนุฏูุฏุฉ

๐ฑ **ูู ุฃู ููุงู**
ุงููุตูู ูู ุงูุฌูุงู ุฃู ุงูููุจููุชุฑ ุจุณูููุฉ
"""
        
        if not self.enabled:
            return default_content.strip()
        
        try:
            prompt = """
ุฃูุช ูุณุงุนุฏ ุฐูู ููุธุงู ุชุนูููู. ุงูุชุจ ูุงุฆูุฉ ุจููุงุฆุฏ ุงุณุชุฎุฏุงู ูุธุงู ุชุณููู ุงููุดุงุฑูุน ุงูุฅููุชุฑููู ููุทูุงุจ.

ุงูุชุจ 5-6 ููุงุฆุฏ ุฑุฆูุณูุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ุจุฃุณููุจ ุชุณูููู ูุดุฌุนุ ูุน ุงุณุชุฎุฏุงู ุงูุฑููุฒ ุงูุชุนุจูุฑูุฉ.
"""
            response = self.model.generate_content(prompt)
            generated_text = response.text
            logger.info("โ AI generated benefits successfully")
            return generated_text.strip()
        except Exception as e:
            logger.error(f"โ AI generation failed: {e}")
            return default_content.strip()
    
    def generate_welcome(self, context: Dict) -> str:
        """ุชูููุฏ ุฑุณุงูุฉ ุชุฑุญูุจ"""
        
        student_name = context.get('student_name', 'ุงูุทุงูุจ')
        school_name = context.get('school_name', 'ุงููุฏุฑุณุฉ')
        
        default_content = f"""
๐ **ูุฑุญุจุงู {student_name}!**

ูุชููู ูู ุชุฌุฑุจุฉ ูุซูุฑุฉ ูู {school_name}

๐ **ูุตุงุฆุญ ูููุฌุงุญ:**

1. ุงุจุฏุฃ ูุดุฑูุนู ูุจูุฑุงู
2. ุงุณุชุฎุฏู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูููุฑุงุฌุนุฉ
3. ุชุงุจุน ุงูููุงุญุธุงุช ูุงูุชุญุณููุงุช
4. ุณููู ูุจู ุงูููุนุฏ ุงูููุงุฆู
5. ูุง ุชุชุฑุฏุฏ ูู ุงูุณุคุงู

๐ช **ูุญู ููุง ูุฏุนูู!**

ุงุณุชูุชุน ุจุชุฌุฑุจุฉ ุชุนููููุฉ ุฐููุฉ ููููุฒุฉ ๐
"""
        
        if not self.enabled:
            return default_content.strip()
        
        try:
            prompt = f"""
ุฃูุช ูุณุงุนุฏ ุฐูู ููุธุงู ุชุนูููู. ุงูุชุจ ุฑุณุงูุฉ ุชุฑุญูุจ ุฏุงูุฆุฉ ููุทุงูุจ ุงูุฌุฏูุฏ.

ุงูุณูุงู:
- ุงุณู ุงูุทุงูุจ: {student_name}
- ุงููุฏุฑุณุฉ: {school_name}

ุงูุชุจ ุฑุณุงูุฉ ุชุฑุญูุจ ูุตูุฑุฉ (3-4 ุฌูู) ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ูุน ูุตุงุฆุญ ุจุณูุทุฉ ูููุฌุงุญุ ุจุฃุณููุจ ูุดุฌุน ููุฏู.
"""
            response = self.model.generate_content(prompt)
            generated_text = response.text
            logger.info("โ AI generated welcome message successfully")
            return generated_text.strip()
        except Exception as e:
            logger.error(f"โ AI generation failed: {e}")
            return default_content.strip()


# Global instance
ai_generator = AIContentGenerator()
